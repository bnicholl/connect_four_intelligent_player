#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 15 16:13:45 2017

"""
#  https://www.youtube.com/watch?v=zDskcx8FStA
#  
import numpy as np
import copy

np.set_printoptions(threshold=np.inf)

c_four = np.array([
                  [0,0,0,0,0,0,0,0],  
                  [0,1,0,0,0,0,0,0],
                  [1,1,0,1,0,0,0,0],
                  [1,1,0,1,0,0,0,0],
                  [1,1,0,1,0,0,0,0],
                  [1,1,1,1,0,0,0,0]    
                  ])

class connect():
    
    def __init__(self):
    
        self.possible_states()    

    def possible_states(self):
        
        self.array = copy.deepcopy(c_four)
        self.states = []
        """iterates the index values in the while loop"""
        index_value = 0
        """as it iterates through the first if statement += 1 is added increase # of 5th dimensions""" 
        fifth_d = -1
        
        #  I need to save every single possible state in a deepcopy
        #  save the state with the enumerator number
        #  and when you call each enumerator number, index it from the -1
        for e,i in enumerate(self.array.T):
            """iterates through all elements in the -1st row"""
            """this level of if statements calcualtes state of 5th dimension"""
            
            """fourth_d will be zerod everytime a new 5th dimension"""
            fourth_d = 0
            
            if i[-1] == 0:
                fifth_d += 1
                #  adds a copy of self.array, than calls the += list_value
                #  to that third dimensional array
                """new 5th dimension created"""
                #  we now have created a self.states[0][0][0]
                self.states.append(copy.deepcopy([[self.array]]))               
                self.states[fifth_d][fourth_d][0][-1][e] = 2
                print('d_1','1',e)
                print(self.states[fifth_d][fourth_d][0])
                
                
                """iterates through all elements in the second to last row"""
                """this level of if statements calculates state of 4th dimension"""
                if i[-2] == 0:       
                    """new 4th dimension"""
                    third_d = 0
                    #  we now have created a self.states[0][1][0]
                    self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                    fourth_d += 1
                    self.states[fifth_d][fourth_d][0][-2][e] = 2
                    print('d_2','2',e)
                    print(self.states[fifth_d][fourth_d][0])
                    
                    
                    """iterates through all elements in the third to last row"""
                    """this level of if statements calcualtes state of terminal nodes(3rd dimension)"""                      
                    if i[-3] == 0:
                        #  we now have created a self.states[0][1][1]
                        #  we always want the last index to be zero, like in the line below so it goes back to the original state
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-3][e] = 2
                        print('d_3','3',e) 
                        print(self.states[fifth_d][fourth_d][third_d])
                        
                    
                    """these check if columns directly left and right on the -2 row == 0 and if the rows beneath them != 0"""   
                    if e+1 < self.array.shape[1] and self.array[-2][e+1] == 0 and self.array[-1][e+1] != 0:
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-2][e+1] = 2
                        print('d_3','4',e)
                        print(self.states[fifth_d][fourth_d][third_d])
                                        
                    if e-1 >= 0 and self.array[-2][e-1] == 0 and self.array[-1][e-1] != 0:
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-2][e-1] = 2 
                        print('d_3','5',e)
                        print(self.states[fifth_d][fourth_d][third_d])
                        
     
                """1st and 2nd if statement check if 2x depth directly right columns on the -1 row == 0"""    
                if e+1 < self.array.shape[1] and self.array[-1][e+1] == 0:
                    third_d = 0
                    """new 4th dimension"""
                    self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                    fourth_d += 1
                    self.states[fifth_d][fourth_d][0][-1][e+1] = 2
                    print('d_2','6',e)
                    print(self.states[fifth_d][fourth_d][0])
                    
                    
                    if e+2 < self.array.shape[1] and self.array[-1][e+2] == 0:
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-1][e+2] = 2  
                        print(self.states[fifth_d][fourth_d][third_d])   
                        print('d_3','7',e)
                        
                    """checks if one right, one up == 0"""    
                    if self.array[-2][e+1] == 0:  
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-2][e+1] = 2
                        print('d_3','8',e)
                        print(self.states[fifth_d][fourth_d][third_d])
                        
                    
                """1st and 2nd if statement check if 2x depth directly left columns on the -1 row == 0""" 
                if e - 1 >= 0 and self.array[-1][e-1] == 0:
                    third_d = 0
                    self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                    fourth_d += 1
                    self.states[fifth_d][fourth_d][0][-1][e-1] = 2
                    print('d_2','9',e)
                    print(self.states[fifth_d][fourth_d][0])
                                  
                    if e - 2 >= 0 and self.array[-1][e-2] == 0:  
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-1][e-2] = 2
                        print('d_3','10',e)
                        print(self.states[fifth_d][fourth_d][third_d])
                        
                    """checks if one left, one up == 0"""    
                    if self.array[-2][e-1] == 0:
                        self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                        third_d +=1
                        self.states[fifth_d][fourth_d][third_d][-2][e-1] = 2
                        print('d_3','11',e) 
                        print(self.states[fifth_d][fourth_d][third_d])
                           
                        
        """this while/for loop checks all elements whose -1st row are != 0"""     
        while index_value > -self.array.shape[0]: #  use .shape on this 
            """index value decreses by one every loop, thus iterating through each row"""
            index_value -= 1            
            for e,i in enumerate(self.array.T):                
                fourth_d = 0
                """iterates through all elements of -2 row where -1 row are != 0"""
                if abs(index_value - 1) <= self.array.shape[0] and i[index_value] != 0 and i[index_value-1] == 0:
                    fifth_d += 1
                    """new 5th dimension created"""
                    self.states.append(copy.deepcopy([[self.array]]))
                    self.states[fifth_d][fourth_d][0][index_value - 1][e] = 2 
                    print('d_1','12',e)
                    print(self.states[fifth_d][fourth_d][0])
                    
                    
                    if abs(index_value - 2) <= self.array.shape[0] and i[index_value-2] == 0:
                        """new 4th dimension"""
                        third_d = 0
                        #  we now have created a self.states[0][1][0]. for first iteration, that is
                        self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                        fourth_d += 1
                        self.states[fifth_d][fourth_d][0][index_value-2][e] = 2
                        print('d_2','13',e)
                        print(self.states[fifth_d][fourth_d][0])
                        
                        
                        if abs(index_value - 3) <= self.array.shape[0] and i[index_value-3] == 0:                   
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-3][e] = 2
                            print('d_3','14',e) 
                            print(self.states[fifth_d][fourth_d][third_d])
                            
                            
                        """check is index value - 2 and e +/- 1 == 0, while index value -1 and e +/- 1 != 0 """       
                        if e+1 < self.array.shape[1] and self.array[index_value-2][e+1] == 0 and self.array[index_value-1][e+1] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-2][e+1] = 2
                            print('d_3','15',e) 
                            print(self.states[fifth_d][fourth_d][third_d])
                                           
                        if e - 1 >= 0 and self.array[index_value-2][e-1] == 0 and self.array[index_value-1][e-1] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-2][e-1] = 2
                            print('16',e)
                            print('d_3',self.states[fifth_d][fourth_d][third_d])
                            
                    """checks if the e+1 value is == 0"""
                    if e+1 < self.array.shape[1] and self.array[index_value-1][e+1] == 0 and self.array[index_value][e+1] != 0:
                        third_d = 0
                        self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                        fourth_d += 1
                        self.states[fifth_d][fourth_d][0][index_value-1][e+1] = 2
                        print('17',e)  
                        print('d_2',self.states[fifth_d][fourth_d][0])
                        
                        """checks if the e+1 value and the row above the iterator is == 0"""
                        
                        if abs(index_value - 2) <= self.array.shape[0] and self.array[index_value-2][e+1] == 0:# and self.array[index_value-1][e+1] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-2][e+1] = 2
                            print('d_3','18',e)
                            print(self.states[fifth_d][fourth_d][third_d])
                            
                            """checks if the e+2 value is == 0"""
                        if e+2 < self.array.shape[1] and self.array[index_value-1][e+2] == 0 and self.array[index_value][e+2] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-1][e+2] = 2
                            print('d_3','19',e)
                            print(self.states[fifth_d][fourth_d][third_d])
                            
                    """checks if the e-1 value is == 0"""        
                    if e - 1 >= 0 and self.array[index_value-1][e-1] == 0 and self.array[index_value][e-1] != 0:
                        third_d = 0
                        self.states[fifth_d].append(copy.deepcopy(self.states[fifth_d][0]))
                        fourth_d += 1
                        self.states[fifth_d][fourth_d][0][index_value-1][e-1] = 2
                        print('d_2','20',e)
                        print(self.states[fifth_d][fourth_d][0])
                        
                        """checks if the e-1 value and the row above the iterator is == 0"""
                        if abs(index_value - 2) <= self.array.shape[0] and self.array[index_value-2][e-1] == 0:# and self.array[index_value-1][e-1] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-2][e-1] = 2
                            print('d_3','21',e)
                            print(self.states[fifth_d][fourth_d][third_d])
                            
                        """checks if the e-2 value is == 0"""
                        if e - 2 >= 0 and self.array[index_value-1][e-2] == 0 and self.array[index_value][e-2] != 0:
                            self.states[fifth_d][fourth_d].append(copy.deepcopy(self.states[fifth_d][fourth_d][0]))
                            third_d += 1
                            self.states[fifth_d][fourth_d][third_d][index_value-1][e-2] = 2
                            print('d_3','22',e)
                            print(self.states[fifth_d][fourth_d][third_d])
                            
                            
    def h(self):
        """represents the 5th index"""
        fifth_d = -1
        
        """the alpha is the highest current score, and the index is the 5'th, 4th, and 3rd indeces of the array giving that alpha score"""
               
        self.alpha = []
        
        """ this while loop iterates through all of the initial states. ie the 5th element"""
        while fifth_d < len(self.states) - 1: # -1 instead of 0 because the first time it runs through this loop it is -1

            fifth_d += 1
            #  starts at 1 because 0 is the initial state, and we dont need the 0'th
            #  3rd dimensional array
            fourth_d = 0
                         
            """this checks is there is multiple states in the 4th index. AKA, it checks if there is another option after the intial move"""
            if len(self.states[fifth_d]) > 1: 
                                              
                """ensure the fourth_d variable is less than the total number of possible paths, or indexes in the fourth dimension"""
                #  for example, if the max fourth dimension index in the 1st fifth dimension is 4 ( [1][4] ), this loop will check [1][1] through [1][4]
                while fourth_d < len(self.states[fifth_d]) - 1:

                    fourth_d += 1
                    terminal_index = 0
                    """gives a value of 2 if there is one 1 depth states and 3 if there are two 2 depth states"""
                    terminal_indices = len(self.states[fifth_d][fourth_d]) 
                    
                    """if terminal indices == 3, their are two iterations which are the -1th and -2th state"""
                    """if terminal indices == 2, their is one iteration which is the -1th state"""
                    # this is where each -i'th row starts, thus a new terminal state h score is zero'd 
                    while terminal_indices > 1:
                        
                        terminal_indices -= 1
                        terminal_index -= 1
                        terminal_state_score = 0
                        row = -1
                        """both of these while loops iterate through all of the individual elements within the arrays and assign values to each state based off of the amount of 2's there are in a row/column"""
                        while row < c_four.shape[1] - 1:
                            row += 1
                            column = 0
                                                       
                            while abs(column) < c_four.shape[0]:
                                column -= 1                                
          
                                #print('fifth',fifth_d)
                                #print('fourth',fourth_d)
                                #print('ter',terminal_index)
                                #print('column',column)
                                #print('row',row)                                
                                                                    
                                """checks down to up on each column, the amount of 2's that are next to eachother"""
                                if abs(column) <= c_four.shape[0] - 3 and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 1][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 2][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 3][row] == 2:
                                    terminal_state_score += 20
                                #  three    
                                elif abs(column) <= c_four.shape[0] - 2 and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 1][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 2][row] == 2:    
                                    terminal_state_score += 5
                                #  two                      
                                elif abs(column) <= c_four.shape[0] - 1 and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column - 1][row] == 2:     
                                    terminal_state_score += 2    
                                 
                                """checks right to left on each row, the amount of 2's that are next to eachother"""    
                                #  if there are four 2's in a row on the rows                                                                                                                    
                                if row + 3 < c_four.shape[1] and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 1] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 2] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 3] == 2:
                                    terminal_state_score += 20
                                #  three    
                                elif row + 2 < c_four.shape[1] and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 1] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 2] == 2:
                                    terminal_state_score += 5
                                #  two    
                                elif row + 1 < c_four.shape[1] and self.states[fifth_d][fourth_d][terminal_index][column][row] == 2 and self.states[fifth_d][fourth_d][terminal_index][column][row + 1] == 2:              
                                    terminal_state_score += 2
                                    
            # if there is not more than one option after initial move AKA a depth of one
            # due to the different states of < 2 move paths, using the logic under the else statement makes algo faster            
            else:
                
                for i in self.states[fifth_d][0]:
                    row = -1
                    terminal_state_score = 0
                    
                    while row < c_four.shape[1] - 1:
                        row += 1
                        column = 0
                                                       
                        while abs(column) < c_four.shape[0]:
                            column -= 1
                                
                            #print(i)
                            #print(i[column][row])
                            #print(column)
                            #print(row)
                    
                    
      
                
                
                
                
                
                
                
                
                
                
